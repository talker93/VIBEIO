 .. _media_io_api:

Media IO API
=============
The Media IO feature allows for :ref:`injecting <api_injection>` video and audio streams into a conference as well as :ref:`recording <api_recording>` the remote participants' streams. 

The basic usage of the Session Service consists of the following steps:
  1) Access the service after :cpp:func:`creating <dolbyio::comms::sdk::create>` and instance of the SDK through the :cpp:func:`sdk::media_io <dolbyio::comms::sdk::media_io>` method.
  2) Set an :cpp:func:`Audio Sink <dolbyio::comms::services::media_io::set_audio_sink>`.
  3) Set an :cpp:func:`Audio Source <dolbyio::comms::services::media_io::set_audio_source>`.
  4) Set an :cpp:func:`Encoded Video Sink <dolbyio::comms::services::media_io::set_encoded_video_sink>`.

.. doxygenclass:: dolbyio::comms::services::media_io

.. _api_injection:

Injection
_________
.. toctree::
  :maxdepth: 2
  :titlesonly:
  :glob:

  injection/audio.rst
  injection/video.rst
  injection/example.rst

.. _api_recording:

Recording
_________
.. toctree::
  :maxdepth: 2
  :titlesonly:
  :glob:

  recording/raw_video.rst
  recording/encoded_video.rst
  recording/audio.rst
  recording/events.rst
  recording/example.rst

.. note::
   The Core SDK API provides methods that are asynchronous in nature and return :ref:`async_result <api_async_result>`. This means that if
   the result or the completion of the operation is necessary for subsequent calls, you have to be careful.  
